<?xml version='1.0' encoding='utf-8'?>
<root><database name="jsoup"><table name="jsoup"><column name="id">1</column><column name="bug_id">1763</column><column name="summary">Copy constructor of Safelist shares state</column><column name="description">The copy constructor of Safelist `public Safelist(Safelist copy)` does not deep copy the data structures as advertised in the JavaDoc but shares the nested data structures, e.g. `Map&lt;TagName, Set&lt;AttributeKey&gt;&gt;`. This causes unexpected mutation.

An example would be:
```java
Safelist safelist1 = Safelist.none().addAttributes("foo", "bar");
Safelist safelist2 = new Safelist(safelist1);
safelist1.addAttributes("foo", "baz");

final String html = "&lt;foo bar=\"val\" baz=\"val\" /&gt;";
System.out.println(Jsoup.clean(html, safelist1));
System.out.println(Jsoup.clean(html, safelist2));
```
The second output should not contain the `baz` attribute but does.</column><column name="commit">72612480cfc5a8b3c6ca31097cfd908121a638da</column><column name="files">src/main/java/org/jsoup/safety/Safelist.java</column></table><table name="jsoup"><column name="id">2</column><column name="bug_id">1848</column><column name="summary">Bug: DOM elements not being placed in (X)HTML namespace.</column><column name="description">The [description page](https://jsoup.org/) for jsoup says:

&gt; jsoup implements the [WHATWG HTML5](https://whatwg.org/html) specification, and parses HTML to the same DOM as modern browsers do.

The [WHATWG HTML5 Specification § 2.1.3 XML compatibility](https://html.spec.whatwg.org/multipage/infrastructure.html#xml) says:

&gt; To ease migration from HTML to XML, user agents conforming to this specification will place elements in HTML in the [http://www.w3.org/1999/xhtml](https://infra.spec.whatwg.org/#html-namespace) namespace, at least for the purposes of the DOM and CSS.

In other words, jsoup should be placing HTML elements in the `http://www.w3.org/1999/xhtml` namespace, even in the absence of an `xmlns` declaration. But it's not.

I'm using `org.jsoup:jsoup:1.15.3` with Java 17. I have a test HTML document that looks something like this:

```html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;title&gt;Foobar&lt;/title
&lt;/head&gt;
&lt;body&gt;
  …
&lt;/body&gt;
```

In a JUnit 5/Hamcrest unit test I read that document:

```java
URL testResourceUrl = getClass().getResource("foobar.html");
try (InputStream inputStream = testResourceUrl.openStream()) {
  org.jsoup.nodes.Document jsoupDocument = Jsoup.parse(inputStream, null, testResourceUrl.toString());
  org.w3c.dom.Document domDocument = new W3CDom().fromJsoup(jsoupDocument);
  assertThat(domDocument.getDocumentElement().getNamespaceURI(), is("http://www.w3.org/1999/xhtml"));
}
```

Unfortunately this test fails:

```
java.lang.AssertionError: 
Expected: is "http://www.w3.org/1999/xhtml"
     but: was null
…
```

Thus jsoup has a bug: it is not following the HTML5 specification and placing HTML elements in the `http://www.w3.org/1999/xhtml` namespace, but instead assigning them the `null` namespace.

To reiterate, yes, I realize that the HTML document in question has no default namespace specified. But as an HTML document it isn't required or even expected to. The HTML5 specification says that the HTML elements should be placed in the `http://www.w3.org/1999/xhtml` regardless.</column><column name="commit">23ea77ef4b0b79b7a0033ea218a45c0d4e45af83</column><column name="files">src/main/java/org/jsoup/helper/W3CDom.java</column></table><table name="jsoup"><column name="id">3</column><column name="bug_id">1871</column><column name="summary">Allow wildcards in whitelist attributes</column><column name="description">HTML5 allows the use of `data-foo`, `data-foo-bar`, etc to specify information on elements. These are relatively harmless and should only contain text.

Currently, each data- attribute needs to be specified explicitly on a whitelist so that it's not removed by `Jsoup.clean()`. Can we add support for either:
1. Wildcard attributes, e.g. `Whitelist.relaxed().addAttributes("a", "data-*")`
   or
2. A new function, like `Whitelist.relaxed().allowDataAttributes("a")`
</column><column name="commit">1762412a28fa7b08ccf71d93fc4c98dc73086e03</column><column name="files">src/main/java/org/jsoup/safety/Safelist.java</column></table><table name="jsoup"><column name="id">4</column><column name="bug_id">1950</column><column name="summary">Attributes in form-elements are not deduplicated when parsing as HTML</column><column name="description">I have an issue with form-elements that contains duplicate attributes. I was expecting that attributes in form-elements should be deduplicated in the same way as all other elements when parsing HTML via Parser.htmlParser() but duplicate attributes seems to always be retained. Using Parser.xmlParser(), form attributes are correctly deduplicated so the issue only affects HTML.

Looking though old issues and pull requests, I found #1219 that seems to fix deduplication for start tags but that fix doesn't seems to apply to form-elements.

Here is a simple test-case adopted from `HtmlParserTest`:

```
    @Test public void dropsDuplicateAttributesInFormElement() {
        String html = "&lt;form One=One ONE=Two Two=two one=Three One=Four two=Five&gt;&lt;/form&gt;";
        Parser parser = Parser.htmlParser().setTrackErrors(10);
        Document doc = parser.parseInput(html, "");

        Element p = doc.selectFirst("form");
        assertEquals("&lt;form one=\"One\" two=\"two\"&gt;&lt;/form&gt;", p.outerHtml()); // normalized names due to lower casing

        assertEquals(1, parser.getErrors().size());
        assertEquals("Dropped duplicate attribute(s) in tag [form]", parser.getErrors().get(0).getErrorMessage());
    }
```</column><column name="commit">f284d35658a8ec46a4caca07b495dc66691cbc17</column><column name="files">src/main/java/org/jsoup/parser/HtmlTreeBuilder.java</column></table><table name="jsoup"><column name="id">5</column><column name="bug_id">2010</column><column name="summary">formData retrieves "input type=image" incorrectly</column><column name="description">Method "formData()" from FormElement retrieve "input type=image" incorrectly

In the HTML form, in the submission form "input type=image" is not sent in the body, but using jsoup it is retrieved.</column><column name="commit">0cfc14c8d99885f17b5f1bd73b0571d3e29f0b41</column><column name="files">src/main/java/org/jsoup/nodes/FormElement.java</column></table></database></root>