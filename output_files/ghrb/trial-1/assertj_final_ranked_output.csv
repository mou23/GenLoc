bug_id,bug_report_analysis,suspicious_files,fixed_files
2685,"The bug report concerns a failure of the `assertContainsIgnoringCase` method to properly compare characters in the `tr_TR` locale, particularly when comparing 'i' and 'I'. The described method is located in the `Strings.java` file of the AssertJ core library. Key terms from the report include 'assertContainsIgnoringCase', 'locale', and 'toLowerCase()', which are relevant in investigating the bug. Since the bug highlights an issue when ignoring case differences, the methods using `toLowerCase()` or related string comparison methods are of particular interest. Additionally, the report references a suggestion to ban unsafe methods such as `toLowerCase()`; thus, files that implement this method might also be critical to review for potential flaws.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/internal/Strings.java"", ""justification"": ""This file contains the implementation of the `assertContainsIgnoringCase` method, which is directly mentioned in the bug report. The logic inside uses `toLowerCase()`, making it a primary candidate for bug localization.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringCase_Test.java"", ""justification"": ""This test file provides various test cases for `assertContainsIgnoringCase`, including cases that check for case-insensitive functionality which directly relate to the reported issue. It includes methods designed to fail or pass based on the case being checked.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotContainIgnoringCase_Test.java"", ""justification"": ""This test file contains scenarios that might reveal issues with ignoring case, especially when checking values that shouldn't be contained, involving `toLowerCase()` logic.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringWhitespaces_Test.java"", ""justification"": ""Although less directly tied to the case issue, it includes cases of validation in string comparisons which might indirectly affect or relate to the underlying issue with the `assertContainsIgnoringCase` method.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotContain_Test.java"", ""justification"": ""Relevant to assessing boundary conditions and functionalities under which the `assertContainsIgnoringCase` might fail, especially in edge cases.""}, {""file"": ""src/main/java/org/assertj/core/util/Strings.java"", ""justification"": ""The utility class might contain different string manipulation methods, including unsafe ones like `toLowerCase()` or similar, which could be flagged for review, as mentioned in the bug report.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertStartsWith_Test.java"", ""justification"": ""Starts with assertions could be potentially impacted by similar case insensitivity issues as asserted in `assertContainsIgnoringCase`.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertEndsWithIgnoringCase_Test.java"", ""justification"": ""Asserts end conditions under case insensitivity, which might also be related to the reported bug.""}, {""file"": ""src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_containsIgnoringCase_CharSequence_Test.java"", ""justification"": ""Contains tests for assertions that are directly concerned with ignoring case within a sequence, pivotal for understanding the bug context.""}, {""file"": ""src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_doesNotContainIgnoringCase_CharSequence_Test.java"", ""justification"": ""Assesses containment ignoring case, directly applicable to the failure being reported.""}]}",src/main/java/org/assertj/core/internal/Strings.java
2549,"The bug report indicates a regression in the functionality of the `containsOnlyKeys` method within `AbstractMapAssert`, specifically when used in conjunction with `MultiValueMapAdapter` from Spring. The key issues highlighted are that the assertion mutates the underlying map (which it should not), leading to test failures. The example provided shows that two assertions result in differing behavior due to the state change in `underlyingMap` after the first assertion. The source of the problem is linked to the use of `Map#remove` on a clone of the asserted map, which impacts the actual underlying map due to delegation in `MultiValueMapAdapter`. This indicates that methods related to key checking, removal, and assertion within these classes should be closely examined to identify possible flaws in their implementations that might lead to this mutation issue.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/api/AbstractMapAssert.java"", ""justification"": ""Contains the method 'containsOnlyKeys' which is central to the bug report. This file is pivotal since the mutation is associated with this assertion method.""}, {""file"": ""src/main/java/org/assertj/core/internal/Maps.java"", ""justification"": ""Holds multiple methods related to Map assertions such as 'assertContainsOnlyKeys', which is directly invoked by 'AbstractMapAssert'. It contains the logic that might lead to mutations in the underlying map.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsOnlyKeys_Test.java"", ""justification"": ""Contains unit tests for the 'containsOnlyKeys' method. Understanding the test cases here can help in identifying specific scenarios that trigger the bug.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsKeys_Test.java"", ""justification"": ""Testing behavior of 'containsKeys'; understanding the relationship and behavior of these methods with asserts could provide helpful insights.""}, {""file"": ""src/test/java/org/assertj/core/api/MapAssertBaseTest.java"", ""justification"": ""Contains base assertions which might give insights into the setup and structure of assertions performed in tests.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_doesNotContain_Test.java"", ""justification"": ""Examining how contains assertions are negated may provide insights on boundary cases leading to unintended mutations.""}]}",src/main/java/org/assertj/core/internal/Maps.java
2364,"The bug report discusses issues stemming from the transition to Java 17, specifically regarding extracting private values from `Optional` using AssertJ and violation of encapsulation due to changes with the strong encapsulation of JDK internals. Key concepts from the report include the use of `extracting` functionality in AssertJ for accessing fields within an `Optional` object, and the reported `IntrospectionError` which references problems when fields or properties don't match expected names (in this case, 'value'). Significant keywords for file search included: ""extracting"", ""Optional"", ""IntrospectionError"", and related methods and classes in AssertJ. Methods related to field access, property extraction for objects, and handling `Optional` types are paramount to this bug.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java"", ""justification"": ""Contains the method 'getValueOf' that attempts to retrieve values of properties and fields, relevant for the introspection error reported.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getValueOf_Test.java"", ""justification"": ""Contains tests that check for expected failures in property/field matching, similar to the error encountered in the bug.""}, {""file"": ""src/main/java/org/assertj/core/util/introspection/FieldSupport.java"", ""justification"": ""Contains 'fieldValues' method, which relates to accessing fields, specifically testing if proper field access management is in place.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/FieldSupport_fieldValues_Test.java"", ""justification"": ""Test file for 'FieldSupport' that includes tests for field access, sends relevant checks for private field access exceptions.""}, {""file"": ""src/test/java/org/assertj/core/api/optional/OptionalAssert_contains_Test.java"", ""justification"": ""Tests assertions on Optional values, crucial for understanding expected behaviors when accessing fields/properties from Optional types.""}, {""file"": ""src/test/java/org/assertj/core/api/optional/OptionalAssert_contains_usingFieldByFieldValueComparator_Test.java"", ""justification"": ""Involves assertions related to Optional field extraction which is central to the bug's context.""}, {""file"": ""src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_String_Test.java"", ""justification"": ""Tests how properties can be extracted using names, directly relates to the failure reported in the bug.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractOptionalAssert.java"", ""justification"": ""A core implementation of assertions that deals with Optional types, fundamental to the assertions that are failing.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractAssert.java"", ""justification"": ""Abstract methods related to assertions which are foundational for all AssertJ functionality encountered in the bug.""}, {""file"": ""src/test/java/org/assertj/core/api/abstract_/AbstractAssert_extracting_with_Function_and_AssertFactory_Test.java"", ""justification"": ""Contains tests for extracting properties, which directly links to the issues raised in the bug report about accessing fields.""}]}",src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java
2445,"The bug report details the issue with the method 'isExactlyInstanceOf' which fails with an error that misidentifies an anonymous inner class as an instance of 'null'. This leads to confusion during assertions, particularly in tests. Keywords extracted include 'isExactlyInstanceOf', 'anonymous inner class', 'confusing error message', and 'assertions'. The problem may be rooted in how the assertion library formats its error messages when the actual object is an instance of an anonymous class, instead of giving a more meaningful descriptor.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/error/ShouldBeExactlyInstanceOf.java"", ""justification"": ""Contains the method 'shouldBeExactlyInstance(Object actual, Class<?> type)', crucial for error handling related to the 'isExactlyInstanceOf' functionality. This method may directly affect how instances are checked and reported in errors.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldNotBeExactlyInstanceOf.java"", ""justification"": ""Includes 'shouldNotBeExactlyInstance(Object actual, Class<?> type)' which might also influence instances and their assertion messages. As it deals with the exactness of instances, it can provide insights into reporting errors.""}, {""file"": ""src/test/java/org/assertj/core/internal/objects/Objects_assertIsExactlyInstanceOf_Test.java"", ""justification"": ""Tests the behavior of assertions like 'isExactlyInstanceOf', including methods to verify that failure conditions are adequately reported, which directly ties to the issue described in the bug.""}, {""file"": ""src/test/java/org/assertj/core/api/abstract_/AbstractAssert_isExactlyInstanceOf_Test.java"", ""justification"": ""It includes tests specifically about 'isExactlyInstanceOf', serving as a direct link to the problem described in the bug report.""}, {""file"": ""src/test/java/org/assertj/core/api/InstanceOfAssertFactoryTest.java"", ""justification"": ""Tests the 'createAssert' behavior and how assertions respond when the actual value is not an instance of the given type, presenting real-world scenarios of failure akin to the bug report.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldHaveCauseExactlyInstance.java"", ""justification"": ""Contains methods relevant to error cause-checks in assertions, potentially affecting how error messages are generated and displayed in cases of assertion failures.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldHaveExactlyTypes.java"", ""justification"": ""Relates to type checking within assertions, which can impact how classes are verified and the error messages that communicate these checks.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldHaveRootCauseExactlyInstance.java"", ""justification"": ""Another component related to cause checks in exceptions, further supporting the context of error messaging following failed assertions.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldBeInstanceOfAny.java"", ""justification"": ""While not directly tied to 'isExactlyInstanceOf', it deals with instance checking, potentially affecting related error messages.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldNotBeOfClassIn.java"", ""justification"": ""Deals with assertions about class membership, which may contribute to how instances and their types are presented, impacting messaging during failures.""}]}",src/main/java/org/assertj/core/presentation/StandardRepresentation.java
