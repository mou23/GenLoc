bug_id,bug_report_analysis,suspicious_files,fixed_files
2549,"The bug report details a regression in the `AbstractMapAssert#containsOnlyKeys` method introduced during the transition from AssertJ version 3.19.0 to 3.20.0. The issue arises when this method mutates a `Map` that is being asserted. Specifically, the report highlights that the `MultiValueMapAdapter` class from Spring is utilized, which is characterized by its delegation behavior to an underlying map. Consequently, operations like `Map#remove` affect both the asserted and underlying maps, leading to discrepancies in assertions. Various keys and methods relevant to assertions on maps were identified, particularly the use of `Assert` methods designed to validate key existence without altering the original data structures. The relevant methods indicated in the bug report are tied to `containsOnlyKeys` in `AbstractMapAssert`, along with the adapter behavior in Spring's collection handling.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/api/AbstractMapAssert.java"", ""justification"": ""This file implements the `containsOnlyKeys` method, which is directly implicated in the bug report. The logic within this file needs to be scrutinized to understand how it is mutating maps upon assertions.""}, {""file"": ""src/main/java/org/assertj/core/internal/Maps.java"", ""justification"": ""Includes methods related to map assertions, particularly those that might invoke or rely on behavior from `AbstractMapAssert`, thus needing analysis to determine the root cause of the mutation issue.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsOnlyKeys_Test.java"", ""justification"": ""Contains tests specifically for the `containsOnlyKeys` method. The test cases likely illustrate scenarios that replicate the bug and can provide insight into expected behaviors.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsOnlyKeys_with_Iterable_Test.java"", ""justification"": ""Similar to the previous file, focuses on assertions using `Iterable` inputs which may have corner cases leading to the current bug.""}, {""file"": ""src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnlyKeys_Test.java"", ""justification"": ""Tests assertions for containing only specified keys; may interact with the problematic areas of the assertion logic.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_raw_map_assertions_chained_after_base_assertions_Test.java"", ""justification"": ""Tests chain assertions which may encounter similar mutation issues. Provides context for the assertion behavior expected.""}, {""file"": ""src/test/java/org/assertj/core/internal/maps/Maps_assertDoesNotContainKey_Test.java"", ""justification"": ""While this test focuses on non-assertion scenarios, it could highlight unintended side effects when keys are removed from underlying maps.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_contains_Test.java"", ""justification"": ""Contains basic assertions, which may be affected by the same underlying mechanisms creating issues with the mutating map.""}, {""file"": ""src/main/java/org/assertj/core/api/MapSizeAssert.java"", ""justification"": ""While not primarily focused on key assertions, it contains logic pertaining to map size that could demonstrate unintended interactions with mutational bugs in assertions.""}]}",src/main/java/org/assertj/core/internal/Maps.java
2685,"The bug report indicates that the method `assertContainsIgnoringCase` fails to properly compare characters in a case-insensitive manner for the Turkish locale, specifically noting issues with characters 'i' and 'Ä°'. The provided code example shows that the method is verifying substring inclusion without taking into account the specific locale nuances when converting characters to lower case.

The keywords and concepts to focus on from the bug report include:
- `assertContainsIgnoringCase`
- Locale-specific comparison (tr_TR)
- Problematic character handling (i and I)

The linked GitHub issues and suggestions to implement safer comparison strategies (e.g., banning `toLowerCase()` and `toUpperCase()`) also guide the search for relevant files that could impact string handling with respect to locale.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/internal/Strings.java"", ""justification"": ""The primary method of concern, `assertContainsIgnoringCase`, is defined here. The method body converts actual and expected strings to lower case, which is specifically problematic in Turkish due to the unique case rules. This file is central to the issue described.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringCase_Test.java"", ""justification"": ""This test file contains tests directly related to `assertContainsIgnoringCase`, including cases with different character cases. Tests validate both success and failure pathways, making it critical to understanding behavior under various inputs.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotContainIgnoringCase_Test.java"", ""justification"": ""Tests for non-contains scenarios, especially those that check different cases, are relevant as they might reveal bugs in handling boundaries and case scenarios.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java"", ""justification"": ""This file contains various string assertion methods, some of which involve case insensitivity checks. Understanding its implementation can provide insight into why `assertContainsIgnoringCase` behaves unexpectedly.""}, {""file"": ""src/test/java/org/assertj/core/test/CaseInsensitiveStringComparatorTest.java"", ""justification"": ""Contains tests that likely explore locale-specific case comparisons, which might reveal why certain comparisons fail. The specific test for Turkish locale is directly related to the bug.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertNotEqualsIgnoringCase_Test.java"", ""justification"": ""The tests for asserting non-equality ignoring case can help highlight issues when strings are very similar but not exactly the same, potentially shedding light on edge cases related to Turkish localization.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotContain_Test.java"", ""justification"": ""Validating assertions where the expected substring is not present could lead to a better understanding of how current logic manages cases and eventual edge cases.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContains_Test.java"", ""justification"": ""Providing additional context about how basic string containment checks are validated may reveal underlying patterns that could impact case sensitivity.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringWhitespaces_Test.java"", ""justification"": ""Though not directly about case sensitivity, whitespace handling can impact string comparisons in edge cases. Understanding these tests could illustrate additional nuances.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertEndsWithIgnoringCase_Test.java"", ""justification"": ""Asserting end conditions while ignoring case can draw parallels to the issue, demonstrating how string comparisons are performed across formats and cases.""}]}",src/main/java/org/assertj/core/internal/Strings.java
2445,"The bug report details an issue with the `isExactlyInstanceOf` method in AssertJ, where it erroneously claims that an instance of an anonymous inner class is 'an instance of null.' Consequently, users may incorrectly believe that the actual value being tested is null when it isn't. This suggests a possible problem in the logic handling type assertions within this framework when it comes to anonymous classes.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/error/ShouldBeExactlyInstanceOf.java"", ""justification"": ""This file contains the method 'shouldBeExactlyInstance' which is directly related to the 'isExactlyInstanceOf' functionality. The implementation suggests error message construction related to type checks, making this file critical for understanding the error messaging issue described in the bug report.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldNotBeExactlyInstanceOf.java"", ""justification"": ""Similar to the previous file, this contains checks related to negative assertions of exact instance types. It may provide insight into error messaging that incorrectly handles instances.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldBeInstanceOfAny.java"", ""justification"": ""The logic in 'shouldBeInstanceOfAny' may also intersect with type checks involving multiple expected types, including anonymous classes, which is pertinent to the bug's context.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldNotBeInstanceOfAny.java"", ""justification"": ""As another layer of context for handling expected type assertions, its logic could also relate to the issue of misleading error messages when instances do not conform to type expectations.""}, {""file"": ""src/test/java/org/assertj/core/internal/objects/Objects_assertIsExactlyInstanceOf_Test.java"", ""justification"": ""Tests in this file validate the behavior of assertions against specific types, including the implementation details regarding anonymous classes, which are central to the bug's reported issue.""}, {""file"": ""src/test/java/org/assertj/core/api/abstract_/AbstractAssert_isExactlyInstanceOf_Test.java"", ""justification"": ""Tests are provided for various assertion scenarios, and it includes 'isExactlyInstanceOf', providing context for how type instances are validated and what error messages result.""}, {""file"": ""src/main/java/org/assertj/core/api/Assert.java"", ""justification"": ""Contains the declaration for the 'isExactlyInstanceOf' method, making it relevant as it facilitates the core functionality related to the bug report.""}, {""file"": ""src/main/java/org/assertj/core/api/ListAssert.java"", ""justification"": ""Includes a method related to 'isExactlyInstanceOf', which may be crucial for understanding how list instances handle type assertions.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractListAssert.java"", ""justification"": ""Houses assertions for lists, which may also invoke 'isExactlyInstanceOf', integrating the behavior with lists, which could impact the handling of anonymous types.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractIterableAssert.java"", ""justification"": ""Contains checks for collection types and their assertions, including 'isExactlyInstanceOf', which might be involved with anonymous inner class assertions.""}]}",src/main/java/org/assertj/core/presentation/StandardRepresentation.java
2364,"The bug report indicates an issue related to extracting nested properties from Java objects using the AssertJ library, specifically when operating under Java 17. It discusses how the upgrade to Java 17 (from Java 11) leads to test failures, primarily due to the stricter encapsulation rules introduced in JEP 396. The error occurs when the library tries to access a private field within an Optional object, but fails because the field is not accessible due to the changes in Java's reflection mechanism. The relevant keywords and components from the report include 'Java 17', 'assertJ', 'optional', 'field access', and specific method names like 'should_access'.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java"", ""justification"": ""The file contains the method 'getValueOf' which directly deals with property and field extraction, aligning with the bug context where properties are not accessible. The method's logic is essential for understanding how AssertionError is thrown when accessing private fields.""}, {""file"": ""src/main/java/org/assertj/core/util/introspection/FieldSupport.java"", ""justification"": ""It includes methods to handle field extraction and has methods checking field accessibility. The method 'fieldValue' logically fits the scenario of the bug where access to the field is concerned.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/FieldSupport_fieldValues_Test.java"", ""justification"": ""This test specifically contains a method that checks for errors when non-public fields are accessed. It highlights the core issue in the bug report regarding inaccessible fields when extraction is attempted.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getValueOf_Test.java"", ""justification"": ""Contains tests that validate property value extraction, which is at the heart of the reported issue about not being able to extract properties correctly.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractOptionalAssert.java"", ""justification"": ""This file handles assertions on Optional types, and its methods are invoked when the test is trying to assert values from an Optional, connecting directly with the described issue.""}, {""file"": ""src/test/java/org/assertj/core/api/optional/OptionalAssert_contains_Test.java"", ""justification"": ""This test validates the scenario where the Optional value is asserted, which appears to be the part of the failed test case referenced in the bug report.""}, {""file"": ""src/test/java/org/assertj/core/api/optional/OptionalAssert_contains_usingValueComparator_Test.java"", ""justification"": ""Tests complex assertions on Optional values, emphasizing field and property access, which closely relates to the bug symptoms.""}, {""file"": ""src/test/java/org/assertj/core/extractor/ByNameSingleExtractorTest.java"", ""justification"": ""Test methods that address how properties are extracted by names, relevant to the issue of failing to access private fields as described.""}, {""file"": ""src/test/java/org/assertj/core/groups/FieldsOrPropertiesExtractor_extract_Test.java"", ""justification"": ""Contains tests that check the behavior when fields do not match given names, crucial for understanding potential mismatches cited in the bug.""}, {""file"": ""src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_String_Test.java"", ""justification"": ""This asserts properties extraction based on field names, and it\u2019s relevant due to the context of nested extraction as described in the bug.""}]}",src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java
