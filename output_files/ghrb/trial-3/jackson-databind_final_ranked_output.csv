bug_id,bug_report_analysis,suspicious_files,fixed_files
4684,"The bug report indicates an issue with a custom key deserializer not being recognized when deserializing a nested Map object using the Jackson library. The report outlines that the deserialization process fails to utilize the registered deserializer for `Object.class`, especially when the key type for the map is not explicitly defined. This is critical, as the user is dealing with arbitrary JSON without a predefined schema, hence the need for key sanitization during parsing. The primary classes involved seem to be `UntypedObjectDeserializerNR`, which handles untyped object deserialization, and `MapDeserializer`, which processes map structures. Keywords include ""custom key deserializer,"" ""ignored,"" ""nested map,"" and ""deserialization.""","{""ranked_list"": [{""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializerNR.java"", ""justification"": ""Contains the 'deserialize' method that handles the deserialization of untyped objects, which is central to the report's issue of ignoring custom key deserializers in untyped scenarios.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java"", ""justification"": ""Includes methods for deserializing maps, which directly relate to the problem as the issue involves nested maps and key deserialization.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"", ""justification"": ""Provides the 'readValue' method which is crucial for the deserialization process of JSON into Java objects, thus relevant for understanding where the problem may occur.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java"", ""justification"": ""Contains functionality to register key deserializers, directly related to the custom deserializer issue mentioned in the bug.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java"", ""justification"": ""Includes methods for finding and constructing key deserializers, which is relevant to the registration and retrieval of the custom key serializer.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java"", ""justification"": ""Handles the addition and retrieval of key deserializers, crucial to the functionality required to resolve the bug.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java"", ""justification"": ""This file defines the interface for key deserializers, which is foundational for understanding how custom key deserialization should function.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/module/TestKeyDeserializers.java"", ""justification"": ""Contains tests to validate key deserializer functionality and behavior, potentially indicative of the expected versus actual behavior causing the bug.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/jdk/CustomMapKeys2454Test.java"", ""justification"": ""Tests the deserialization of maps with custom keys, relevant to the issue presented regarding nested maps and deserializer registrations.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapKeyDeserialization3143Test.java"", ""justification"": ""Contains specific tests for map key deserialization which may help validate whether the reported issue is indeed a bug with the deserialization logic.""}]}",src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
4050,"The bug report highlights an issue with the method `ObjectMapper.valueToTree()` wherein the setting `SerializationFeature.WRAP_ROOT_VALUE` does not seem to take effect after upgrading to a new version of `jackson-databind`. The report suggests that this change in behavior may affect how root values are serialized when using the `valueToTree()` method, which is expected to be consistent with the behavior of `writeValueAsString`. The report also indicates that the configuration for wrapping root values should be global. The methods and classes involved include `ObjectMapper`, `valueToTree`, and the `Event` class. Furthermore, the bug report references a specific commit that has introduced the problematic behavior.","{""ranked_list"": [{""file"": ""src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"", ""justification"": ""Contains the implementation of the `valueToTree(Object fromValue)` method. The analysis reveals that it disables wrapping with `without(SerializationFeature.WRAP_ROOT_VALUE)` which is directly related to the bug.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java"", ""justification"": ""Includes a method `objectMapper()` that creates and returns an instance of `ObjectMapper`. Relevant as it might influence how tests on serialization are conducted.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest.java"", ""justification"": ""Contains various test methods, including possible tests for serialization behavior. It may hold relevant tests that demonstrate or verify the behavior of `valueToTree`.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java"", ""justification"": ""Defines configurations for serialization, including the features that can be enabled or disabled, potentially linking to how `valueToTree` operates.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/ObjectWriterTest.java"", ""justification"": ""Tests the serialization features for `ObjectWriter`. May include tests relevant to the `writeValueAsString()` method and its behavior.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/TestRootName.java"", ""justification"": ""Test class that might relate to the `@JsonRootName` feature and its interaction with the serialization methods.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java"", ""justification"": ""Examines the serialization of tree types which is related to how objects are serialized using `valueToTree`.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java"", ""justification"": ""Contains tests related to configuration settings that may impact serialization settings, including `SerializationFeature.WRAP_ROOT_VALUE`.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java"", ""justification"": ""Examines JSON serialization details, including how various configurations influence serialization functions, possibly impacting related methods.""}]}",src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
4467,"The bug report details an issue with the serialization behavior of the Jackson library when the `Include.NON_DEFAULT` setting is used within an `ObjectMapper`. It states that the custom serializer's `isEmpty()` method isn't called, particularly under the usage of `Include.NON_DEFAULT`. The keywords extracted from the report include 'Include.NON_DEFAULT', 'isEmpty()', 'custom serializer', and 'serialization' which unveil the aspects of serialization and the operation of data handling that might be affected. Additionally, it brings attention to the interplay between Jackson's configurations for property inclusion (`NON_EMPTY` vs. `NON_DEFAULT`), which suggests that the relevant files would likely be related to serialization processes and the `ObjectMapper` configurations.","{""ranked_list"": [{""file"": ""src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java"", ""justification"": ""Directly implements the `isEmpty()` method which is crucial for serialization checks in map contexts. The implementation also highlights how suppression rules are applied based on the context, potentially explaining why the custom serializer isn't invoked. This file bears significant relevance as it could showcase the mismanagement of the serializer for properties marked as empty.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java"", ""justification"": ""This class has its own implementation of `isEmpty()` and deals with map entries, making it relevant for how the property is serialized during object mapping. Given that map entries are usually included in the object serialization, a bug in serialization handling here could directly lead to the issues observed in the bug report.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/impl/NullsAsEmptyProvider.java"", ""justification"": ""This class plays a role in determining how null values are treated in the serialization process. Since the bug involves the understanding of what counts as 'empty', understanding this provider will be vital in gaining insight into how serialization decisions are made in the presence of nulls.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java"", ""justification"": ""The base class for serializers, containing the `serialize` method. Insight into its design can reveal why certain serializers, particularly custom ones, are not called as expected when using `Include.NON_DEFAULT`.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java"", ""justification"": ""Manages instances of serializers and their contexts. Understanding its role will provide clarity on how Jackson determines which serializer to use based on the inclusion settings.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeTest.java"", ""justification"": ""Test cases for JsonInclude functionality, specifically relevant for tests involving property inclusion and checks against inclusion types like `NON_DEFAULT`. This file possibly holds relevant examples that reproduce or address serialization behavior.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java"", ""justification"": ""Responsible for creating serializers. Insight into its method could help determine if the factory configuration creates conflicts between `NON_DEFAULT` and `NON_EMPTY`, impacting serializer invocation.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java"", ""justification"": ""Handles property serialization configurations. It might define behaviors that unintentionally skip custom serializer invocation depending on the global settings implied by `Include.NON_DEFAULT`.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeOverrideTest.java"", ""justification"": ""Contains tests specifically designed to ensure correct handling of the JsonInclude overrides. Useful for validating if any changes need to occur in how `Include.NON_DEFAULT` is respected during serialization.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java"", ""justification"": ""While mainly focused on deserialization, understanding the interactions between deserialization and serialization could reveal potential misalignments leading to the bug, especially in terms of how property inclusions interact across processes.""}]}",src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
3418,"The bug report indicates a deserialization issue with the Jackson library when the feature `ACCEPT_SINGLE_VALUE_AS_ARRAY` is enabled. Specifically, an empty XML element `<values/>` is being deserialized into a list that incorrectly contains a single empty string instead of an empty list. Key concepts from the report include deserialization mechanisms related to collections, particularly the handling of empty arrays and single values. The method `isExpectedStartArrayToken` is crucial since it plays a role in determining whether a deserializer should expect an array structure. There are references to `StringCollectionDeserializer`, `JsonParser`, and specific methods that need scrutiny to identify the faulty logic leading to incorrect serialization behavior.","{""ranked_list"": [{""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java"", ""justification"": ""Contains methods that directly manage string collections during deserialization. The method 'deserialize' is crucial for determining the conversion logic from tokens to collections.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java"", ""justification"": ""Handles generic collection deserialization. The logic in 'deserialize' and 'handleNonArray' methods are vital since they control how collections respond based on the input token type, and it can directly contribute to the bug's manifestation.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java"", ""justification"": ""Focuses on handling string arrays and evaluates conditions on whether a single value should be treated as an array or just a single item, relevant to the bug's context regarding 'ACCEPT_SINGLE_VALUE_AS_ARRAY'.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java"", ""justification"": ""Deals with deserialization logic which might impact how bean objects are treated when structured as arrays; relevant in the context of how empty values are interpreted.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java"", ""justification"": ""Includes test methods that specifically check deserialization conditions related to single values being treated as arrays, which directly relates to the bug report's problem.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java"", ""justification"": ""Manages serialization of string arrays and may influence deserialization behavior based on configurations drawn from serialization settings.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/jdk/CollectionDeserTest.java"", ""justification"": ""Tests various collection deserializations in detail, likely covering edge cases which might relate to the discussion in the bug report.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java"", ""justification"": ""Tests deserialization capabilities under different settings, including acceptance of single value arrays, which might be relevant given the report's focus on this feature.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java"", ""justification"": ""Relevant for understanding how primitive arrays are converted and may expose discrepancies when interfacing with collection conversions.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/convert/CoerceEmptyArrayTest.java"", ""justification"": ""Contains tests that ensure empty arrays are handled correctly. This test suite will likely have relevant cases that expose the deserialization flaw described.""}]}","src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java,src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java"
4641,"The bug report indicates an issue with the handling of the `@JsonAnySetter` annotation when it is applied both on a field and a constructor parameter. The error occurs when deserializing JSON into object fields, leading to both fields being assigned null values, which implies a conflict in recognition by the serialization library (Jackson). The keywords to consider in the file search are `@JsonAnySetter`, `constructor parameter`, and `field`, along with error handling context related to these annotations. Component focus is on deserialization behavior in JSON mapping that involves the Jackson library's handling of constructors and potential conflicts.","{""ranked_list"": [{""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/creators/AnySetterForCreator562Test.java"", ""justification"": ""This file contains direct tests for cases involving the `@JsonAnySetter` annotation on constructor parameters and fields. The methods `mapAnySetterViaCreator562()` and `testAnySetterViaCreator562FailForDup()` specifically address scenarios similar to the bug, validating the behavior of the deserialization process and highlighting issues when multiple `any-setter` annotations are present.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/AnySetterTest.java"", ""justification"": ""This file includes various test cases for `@JsonAnySetter` functionality. The methods `testJsonAnySetterOnMap()` and `testAnySetterDisable()` explore the annotations' behavior which may reveal details about how null values are processed during deserialization, particularly useful in diagnosing conflicts when multiple annotations are present.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java"", ""justification"": ""This class handles the deserialization logic for properties annotated with `@JsonAnySetter`. The method `deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance, String propName)` is crucial for understanding how Jackson manages to set properties for annotations, providing insights that could explain the failure described in the bug report.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/creators/MultiArgConstructorTest.java"", ""justification"": ""This file contains tests for multi-argument constructors which could potentially relate to how parameters and field conflicts are handled in deserialization. It may help elucidate underlying mechanisms at play with constructor annotations.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorPropertiesTest.java"", ""justification"": ""Includes tests related to constructor properties annotations which may offer insight denoting how they are treated during deserialization, informing potential conflicts when mixing field and constructor annotations.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/creators/ConstructorDetectorTest.java"", ""justification"": ""This test verifies detection of constructors, which might relate to how Jackson parses annotations. Given the bug's focus on constructor parameters, methods in this file might expose significant behavior tied to conflicting annotations.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators2.java"", ""justification"": ""Contains various creators and their handling, dealing with annotations that may guide how conflicting annotations lead to erroneous behavior.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorNullPrimitives2977Test.java"", ""justification"": ""Focuses on constructors that default to null values, relevant in the context of figuring out our reported issue, highlighting how certain configurations result in null field values.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java"", ""justification"": ""While this file is not directly concerned with deserialization, it plays a role in understanding how Jackson interprets annotations overall and could shed light on how the conflicting behavior originates.""}]}",src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
3868,"The bug report highlights a difference in the handling of `ObjectId-property` in the `JsonIdentityInfo` class during deserialization. It mentions that setter-based deserialization does not throw an error when the `id-property` is absent from the JSON, while instantiator-based deserialization throws a `MismatchedInputException`. The relevant components are primarily related to JSON deserialization, specifically areas handling Object IDs and their mappings to properties. The presence of classes like `JsonIdentityInfo`, `ObjectIdGenerators`, and methods such as `readValue()` is likely significant. Additionally, the tests reported in the issue indicate direct implications for the behavior in the classes involved in deserialization within the Jackson library.","{""ranked_list"": [{""file"": ""src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdDeserialization.java"", ""justification"": ""Contains test methods directly related to the deserialization process, particularly `testMissingObjectId()` indicates non-failure on absent id which corresponds to the bug description.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java"", ""justification"": ""Contains methods like `deserialize()` and `deserializeWithType()` which are critical in handling the deserialization logic where the described issues occur.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java"", ""justification"": ""Important for handling properties during the deserialization process; contains relevant methods that could affect how Object IDs are managed.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java"", ""justification"": ""Manages Object ID references and contains methods like `readObjectReference()` which is pivotal in understanding how Object IDs are handled in deserialization.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorWithObjectIdTest.java"", ""justification"": ""Specifically tests creator-based deserialization, directly relevant to the instantiator-based issues mentioned in the bug report.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java"", ""justification"": ""Contains the core logic for deserializing beans, relevant due to its interplay with the framework's treatment of Object IDs.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java"", ""justification"": ""Handles object deserialization from JSON arrays, relevant because it might interact with Object ID logic under certain configurations.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectId.java"", ""justification"": ""Contains additional test cases around Object IDs which may shed light on how these IDs and their absence are treated throughout the Jackson framework.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java"", ""justification"": ""Central to managing context during deserialization, including handling missing properties which is at the heart of the bug.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java"", ""justification"": ""Provides handling mechanisms for dealing with issues during deserialization, including potentially those related to missing Object IDs.""}]}",src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
3962,"The bug report describes an issue with deserialization where the library Jackson is incorrectly reporting the type coercion problem when attempting to deserialize a String from an Array or Object. The test cases provided highlight the failure to correctly identify and report on the coercion actions for different data types under certain configurations, specifically when coercions have been disabled in the ObjectMapper settings. The primary functionality of concern revolves around the ObjectMapper's readValue method in conjunction with coercion configurations, especially when dealing with complex types like Lists and custom Input types (as seen in the provided test example where 'Input<T>' is used). The keywords and methods highlighted include coercion, readValue, deserialization, ObjectMapper, and specific Java types such as String and Array.","{""ranked_list"": [{""file"": ""src/test/java/com/fasterxml/jackson/databind/convert/DisableCoercions3690Test.java"", ""justification"": ""Contains a test case 'testCoercionFail3690()' which directly addresses the issue of coercion failure in deserialization of input types. The assertions verify the expected exceptions when wrong types are provided.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsDeserTest.java"", ""justification"": ""Includes methods like 'testInvalidStringCoercionFail()' which checks for coercion failures specifically with various scalar types\u2014relevant to the bug's mention of coercion issues.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/convert/CoerceContainersTest.java"", ""justification"": ""This file tests coercion configurations for collection types, with methods like 'testScalarCollections()' which may help identify if the array types are handled correctly.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserialization.java"", ""justification"": ""Tests various deserialization scenarios which can relate to coercion and might show how type mismatches are handled.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java"", ""justification"": ""Contains the logic for deserializing values from JSON and checking coercion actions through methods like 'readValue'. This is fundamental to understanding how coercions are processed.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"", ""justification"": ""Core file responsible for the deserialization process, including the 'readValue' method which is invoked during the flow that leads to the reported bug.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/convert/CoerceJDKScalarsTest.java"", ""justification"": ""Tests various coercion scenarios with scalars and may have relevant insights or test cases about failure handling that relates to the reported bug.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/convert/CoerceIntToStringTest.java"", ""justification"": ""Tests the failure cases of coercion from Integer to String, indicating potential similarities to the String and Array coercion issue.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/introspect/TypeCoercion1592Test.java"", ""justification"": ""Though focusing on a specific type coercion case, it may provide insight into handling complex Java Types related to coercion failures.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/convert/EmptyStringAsSingleValueTest.java"", ""justification"": ""Includes tests concerning how empty strings are coerced into collections, which is related to the overall topic of coercion failures.""}]}",src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
4320,"The bug report focuses on issues with handling `null` values when deserializing collections in Java using the Jackson library, specifically with regards to `@JsonSetter(nulls=...)` and certain features like `READ_UNKNOWN_ENUM_VALUES_AS_NULL` and `FAIL_ON_INVALID_SUBTYPE`. The report mentions that unknown enum values are being added as `null` instead of being skipped as intended. This indicates a potential misconfiguration or implementation detail within the methods that handle enum deserialization, specifically in tests that demonstrate these behaviors using various settings. The keywords ""Jackson"", ""nulls"", ""enum values"", and ""deserialization"" are critical to guiding the search for affected files.","{""ranked_list"": [{""file"": ""src/test/java/com/fasterxml/jackson/failing/NullsSkip4309Test.java"", ""justification"": ""This file contains specific tests for skipping null values in deserialization scenarios involving enums and subtypes, directly correlating to the bug report's focus on the use of `@JsonSetter(nulls=Nulls.SKIP)` and the effects of setting `READ_UNKNOWN_ENUM_VALUES_AS_NULL`. Specific methods like `shouldSkipUnknownEnumDeserializationWithSetter` are crucial as they explicitly address skipping null enum values.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/enums/EnumDeserializationTest.java"", ""justification"": ""This test file includes multiple tests on enum deserialization. The methods `testAllowUnknownEnumValuesReadAsNull` and `testAllowUnknownEnumValuesReadAsNullWithCreatorMethod` specifically address the handling of unknown enum values, which is central to the reported issue where such values may incorrectly result in null assignments during deserialization.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/NullHandlingTest.java"", ""justification"": ""Contains tests that validate the behavior of deserialization when `null` values are encountered within collections. The method `testContentsNullFailForCollections()` is directly relevant as it tests the system's response to nulls in various collections, pertinent to the bug's focus on null handling.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsSkipTest.java"", ""justification"": ""This test checks the behavior of skipping null enum values. The method `testEnumAsNullThenSkip` directly connects to the reported bug by testing how enum deserialization treats unknown values as null and whether they are skipped accordingly.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/enums/EnumAltIdTest.java"", ""justification"": ""Includes tests that examine enum deserialization and behavior regarding unknown enum values. The test method `testEnumWithNullForUnknownValueEnabled` refers to handling enums in the context of deserialization features relevant to the bug report.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsForContentTest.java"", ""justification"": ""Focuses on conversion rules for collecting nulls in deserialization processes. The methods present deal with various testing conditions for null handling, making it relevant to understanding the conditions under which the bug may manifest.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java"", ""justification"": ""This file assesses deserialization involving subtypes, which is directly linked to the report's mention of `FAIL_ON_INVALID_SUBTYPE`. The methods in this file pertain to situations wherein properties may be misconfigured during deserialization.""}, {""file"": ""src/test/java/com/fasterxml/jackson/databind/deser/filter/TestUnknownPropertyDeserialization.java"", ""justification"": ""This test addresses handling of unknown properties in deserialization scenarios, which is indirectly related to potential issues of unknown enum values and how the system responds to them.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java"", ""justification"": ""The core implementation of enum deserialization logic resides here. This file would contain the details of how the `READ_UNKNOWN_ENUM_VALUES_AS_NULL` feature is implemented, making it foundational to understanding the underlying cause of the reported bug.""}, {""file"": ""src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java"", ""justification"": ""This file provides the fundamental structure for deserializers, and understanding its implementation can provide insights into how nulls and unknown values are handled across various data types, including enums.""}]}",src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
