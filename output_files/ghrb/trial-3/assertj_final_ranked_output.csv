bug_id,bug_report_analysis,suspicious_files,fixed_files
2549,"The bug report summarizes a regression in `AbstractMapAssert#containsOnlyKeys` triggered by the transition from AssertJ version 3.19.0 to 3.20.0. The core issue is that the assertion method appears to mutate the map it's validating, specifically when asserting an instance of `org.springframework.util.MultiValueMapAdapter` which delegates operations to an underlying map. This unintended side effect results in failures in unit tests due to the original `underlyingMap` being manipulated, leading to assertions failing on a subsequently empty map after the first assert call. Key components for investigation include `AbstractMapAssert` where the `containsOnlyKeys` method is implemented and references to the `MultiValueMapAdapter`. The specific pull request that introduced the bug is also relevant, especially its handling of maps within assertion methods, notably using `Map#remove`.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/api/AbstractMapAssert.java"", ""justification"": ""Contains the main assertion methods including `containsOnlyKeys`, critical for this bug as it has been identified as the source of mutation, leading to unwanted side effects.""}, {""file"": ""src/main/java/org/assertj/core/internal/Maps.java"", ""justification"": ""Includes utility methods for assertions on maps, specifically the handling of keys in `assertContainsOnlyKeys`, which is directly related to the bug's context.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsOnlyKeys_Test.java"", ""justification"": ""Contains test cases that directly test `containsOnlyKeys`, essential for reproducing the bug and examining the assertion behavior.""}, {""file"": ""src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnlyKeys_Test.java"", ""justification"": ""Tests the `assertContainsOnlyKeys` method in the context of map assertions, which is vital to understanding how the underlying operations work.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsKeys_Test.java"", ""justification"": ""Tests methods related to key assertions, which may intersect with `containsOnlyKeys` functionality.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsOnly_with_Java_Util_MapEntry_Test.java"", ""justification"": ""Investigates assertions involving multiple keys, relevant to the way `containsOnlyKeys` operates.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_containsExactly_Test.java"", ""justification"": ""Test coverage for assertions that could reveal behavior changes in key handling after the regression.""}, {""file"": ""src/test/java/org/assertj/core/api/map/MapAssert_extractingByKeys_Test.java"", ""justification"": ""Enhances understanding of how keys are processed, showing indirect effects related to the bug.""}, {""file"": ""src/test/java/org/assertj/core/internal/maps/Maps_assertContains_Test.java"", ""justification"": ""May provide insights into how map assertions work overall and highlight interactions with the faulty methods.""}]}",src/main/java/org/assertj/core/internal/Maps.java
2445,"The bug report indicates that the method `isExactlyInstanceOf` returns a confusing error message when checking an instance of an anonymous inner class. The primary issues appear to be related to error message clarity, particularly when the actual object being checked is not of the expected type but is not null. The critical keywords from the report include: `isExactlyInstanceOf`, `anonymous inner class`, `error message`, `confusing`, and `null`. The affected components include the classes where the `isExactlyInstanceOf` method is defined and any error message classes that handle assertions made with this method. This analysis hints that both the method implementations and potentially the error message generation are relevant. Looking for `isExactlyInstanceOf` methods and error message handling methods in the code where these are defined will yield relevant files.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/api/AbstractAssert.java"", ""justification"": ""The `isExactlyInstanceOf` method in this file calls `objects.assertIsExactlyInstanceOf`, which probably handles the actual assertion and error message generation. Its implementation is key to resolving the bug.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldBeExactlyInstanceOf.java"", ""justification"": ""This class creates error messages for the `isExactlyInstanceOf` assertions and contains logic relevant to how assertions handle the actual values and errors.""}, {""file"": ""src/main/java/org/assertj/core/error/ShouldNotBeExactlyInstanceOf.java"", ""justification"": ""Similar to the previous file, it handles error messages for the negative assertion cases, making it relevant for understanding contrast and messaging.""}, {""file"": ""src/main/java/org/assertj/core/api/Assert.java"", ""justification"": ""The interface definition for `isExactlyInstanceOf` where actual checks are directed. Critical for understanding the contract of how assertions are designed.""}, {""file"": ""src/main/java/org/assertj/core/api/ListAssert.java"", ""justification"": ""Overrides for lists that may handle specific anonymous inner classes and their messages differently, relevant to the context provided in the report.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractIterableAssert.java"", ""justification"": ""This assert class may have specifics regarding its handling of elements, and thus relevant for understanding anonymous classes.""}, {""file"": ""src/test/java/org/assertj/core/error/ShouldBeExactlyInstance_create_Test.java"", ""justification"": ""Test harness for generating error messages; need to verify how these messages are applied in practice for `isExactlyInstanceOf`.""}, {""file"": ""src/test/java/org/assertj/core/error/ShouldNotBeExactlyInstance_create_Test.java"", ""justification"": ""Tests relating to the negative assertions and their respective messaging, which could highlight areas where errors and confusion could propagate.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractListAssert.java"", ""justification"": ""Another layer for list assertions that might interact with anonymous types, thus could influence overall handling.""}, {""file"": ""src/main/java/org/assertj/core/api/AbstractMapAssert.java"", ""justification"": ""While not as immediately apparent, maps could also interact in complex usages with class types, warranting inspection.""}]}",src/main/java/org/assertj/core/presentation/StandardRepresentation.java
2685,"The bug report highlights an issue with the method `assertContainsIgnoringCase` in the `Strings` class, particularly in relation to how it compares characters in a specified locale (tr_TR). The key points in the report include a failure to recognize character case differences, specifically between 'i' and 'I', which points toward potential issues in the implementation's handling of locale-specific case insensitivity. Furthermore, the report suggests a verification mechanism to prevent unsafe method calls (like `toLowerCase()` and `toUpperCase()`) that could compromise the expected behavior in certain locales. The method `assertContainsIgnoringCase` uses `toLowerCase()` directly, which is likely contributing to the reported bug. The class `Strings` and its related test classes are of central relevance in this context, as they appear to contain functionality critical to the bug's symptomology. Furthermore, suggested tests related to case-insensitive comparisons reinforce the need to examine equality checks and their conditions in the implementation and test cases.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/internal/Strings.java"", ""justification"": ""Directly contains the method `assertContainsIgnoringCase`, which is identified in the bug report. The method's body currently utilizes `toLowerCase()` to perform case-insensitive checks, which is the crux of the problem stated.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringCase_Test.java"", ""justification"": ""Contains tests on `assertContainsIgnoringCase`, particularly relevant tests such as `should_pass_if_actual_contains_sequence_in_different_case()` which directly involve the functionality described in the bug report.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertNotEqualsIgnoringCase_Test.java"", ""justification"": ""Tests case-insensitivity checks that might relate indirectly to the bug, such as the test ensuring that equals checks are appropriately managed irrespective of case. This can provide insight into potential issues in the logic.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotContainIgnoringCase_Test.java"", ""justification"": ""Directly tests the behavior of similar functionality by applying negative assertions against case insensitivity, which could reveal flaws in assumptions made in the `assertContainsIgnoringCase` method.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringWhitespaces_Test.java"", ""justification"": ""Examines comparisons involving ignoring both whitespace and case, thus potentially revealing additional insights into broader issues around string comparisons in the context of locale.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertIsMixedCase_Test.java"", ""justification"": ""Tests conditions of case assessments that might intersect with the logic of case sensitivity outlined in the bug, providing context around mixed-case handling.""}, {""file"": ""src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringNewLines_Test.java"", ""justification"": ""Tests functionality similar in nature to the bugged method, focusing on string handling which may reveal underlying issues in zeroing in on differences across whitespace and case.""}, {""file"": ""src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_containsIgnoringCase_CharSequence_Test.java"", ""justification"": ""Examines cross-method assertions regarding case insensitivity specifically for sequences, adding further context to what methods should address.""}]}",src/main/java/org/assertj/core/internal/Strings.java
2364,"The bug report details a failure occurring when using AssertJ with Java 17, specifically regarding the extraction of values from an instance of `Optional`. The key phrases include `InaccessibleObjectException` and failure to access the private field of `Optional`, which is encapsulated due to strong encapsulation rules introduced in Java 17. The methods involved suggest that tests are attempting to extract values from `Optional` using field names, which are not publicly accessible. Given the content of the bug report, files related to AssertJ's extraction mechanism, introspection utilities, and tests for optional handling should be prioritized in the search.","{""ranked_list"": [{""file"": ""src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java"", ""justification"": ""This file contains logic for extracting property values and has methods relevant to the issue of accessing fields and properties. Specifically, `getValueOf` handles property/field access, which is central to the introspection error faced in the bug report.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/FieldSupport_fieldValues_Test.java"", ""justification"": ""Contains tests for asserting field extraction. The test `should_throw_error_if_field_not_found()` is directly relevant because it deals with scenarios where expected fields are not accessible, aligning well with the bug report's issue.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getValueOf_Test.java"", ""justification"": ""Tests methods for getting values from properties or fields, including scenarios where no matching field can be found as described in the bug report. This aligns with the error message about not finding 'value'.""}, {""file"": ""src/test/java/org/assertj/core/api/optional/OptionalAssert_contains_usingFieldByFieldValueComparator_Test.java"", ""justification"": ""Tests how `Optional` values are contained and compared when accessing them through fields, which directly relates to the reported issue about extracting values.""}, {""file"": ""src/test/java/org/assertj/core/api/optional/OptionalAssert_contains_Test.java"", ""justification"": ""Handles assertion scenarios for `Optional` types, specifically how they behave when values are expected to be present which corresponds to the bug's context.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/PropertySupport_propertyValues_Test.java"", ""justification"": ""Contains tests for property extraction within collections, which is relevant due to the encapsulation which may cause failures when field extraction is expected to occur.""}, {""file"": ""src/main/java/org/assertj/core/util/introspection/FieldSupport.java"", ""justification"": ""Implements core functionality for field introspection, therefore directly involved in the extraction failure that caused the bug.""}, {""file"": ""src/test/java/org/assertj/core/api/optional/OptionalAssert_get_Test.java"", ""justification"": ""Conducts assertions on optional values, specifically methods relevant to ensuring that access and retrieval work as intended, potentially mirroring the issue.""}, {""file"": ""src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getSimpleValue_with_Map_input_Test.java"", ""justification"": ""Tests how properties are accessed, focusing on mappings from fields which connects to the issue reported regarding field accessibility.""}, {""file"": ""src/test/java/org/assertj/core/extractor/ByNameSingleExtractorTest.java"", ""justification"": ""Tests the extraction of field values by name, which is directly related to the failure encountered. The specifics in extracting values connect with the described Java 17 compatibility issue.""}]}",src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java
